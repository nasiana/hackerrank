https://leetcode.com/problems/two-sum/
"""
Two Sum

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
"""

# My solution

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        nums_map = {}
        for i in range(len(nums)):
            val = target-nums[i]
            if val in nums_map:
                return(i, nums_map[val])
            nums_map[nums[i]] = i 

"""
Best Time to Buy and Sell Stock
"""

# My solution

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit = 0
        min_price = max(prices)
        length = len(prices)
        for i in range(length):
            min_price = min(min_price, prices[i])
            max_profit = max(max_profit, prices[i]-min_price)
        return max_profit

"""
Maximum Subarray
"""

# My solution

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        max_sum = max_sum_prev = -math.inf
        length = len(nums)
        for i in range(length):
            max_sum = max(max_sum+nums[i], nums[i])
            max_sum_prev = max(max_sum, max_sum_prev)
        return max_sum_prev

"""
Two Sum II - Input Array Is Sorted
"""

# My solution

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        length = len(numbers)
        for i in range(length):
            val =  target - numbers[i]
            if val in numbers and numbers.index(val) != i:
                # adding 1 as this is 1-indexed
                if i < numbers.index(val):
                    return [i+1, numbers.index(val)+1]
                else:
                    return [numbers.index(val)+1, i+1]

# Coding my own version of solution given

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        length = len(numbers)
        i = 0
        j = length-1
        # all the other data structures seem to behave as 0-index so have to add 1 as the array is 1-indexed
        if numbers[i] + numbers[j] == target:
            return [i+1, j+1]
        while numbers[i] + numbers[j] != target:
            if numbers[i] + numbers[j] < target:
                i += 1
            if numbers[i] + numbers[j] > target:
                j -= 1
            if numbers[i] + numbers[j] == target:
                return [i+1, j+1]

"""
The editorial solutions makes use of the list being already sorted.

We use two indices, initially pointing to the first and the last element, respectively. Compare the sum of these two elements with target.
If the sum is equal to target, we found the exactly only solution. If it is less than target, we increase the smaller index by one. 
If it is greater than target, we decrease the larger index by one. Move the indices and repeat the comparison until the solution is found.
"""

"""
Shortest Word Distance

Given an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest 
distance between these two words in the list.
"""

# My solution

class Solution:
    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:
        length = len(wordsDict)
        word_dict = []
        min_d = length+1
        for i in range(length):
            if wordsDict[i] == word1 and len(word_dict) == 0:
                word_dict.append(i)
                wd1 = True
                wd2 = False
            if wordsDict[i] == word2 and len(word_dict) == 0:
                word_dict.append(i)
                wd1 = False
                wd2 = True
            if wordsDict[i] == word1:
                temp_idx = len(word_dict)-1
                if wd2 == True:
                    min_d = min(min_d, i-word_dict[temp_idx])
                    # Once we find the minDistance to be equal to 1, we can just return because it can never go down below that.
                    if min_d == 1:
                        return min_d
                word_dict.append(i)
                wd1 = True
                wd2 = False
            if wordsDict[i] == word2:
                temp_idx = len(word_dict)-1
                if wd1 == True:
                    min_d = min(min_d, i-word_dict[temp_idx])
                    if min_d == 1:
                        return min_d
                word_dict.append(i)
                wd1 = False
                wd2 = True
        return min_d
    
# My attempt at the given solution

class Solution:
    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:
        length = len(wordsDict)
        min_d = i1 = length+1
        i2 = 10*length 
        for i in range(length):
            if wordsDict[i] == word1:
                i1 = i
            if wordsDict[i] == word2:
                i2 = i
            min_d = min(min_d, abs(i2-i1))
        return min_d

"""
Move Zeroes

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.
"""

# My solution

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        length = len(nums)
        for i in range(length):
            if nums[i] == 0:
                nums.remove(nums[i])
                nums.append(0)

# Rewrote someone else's solution

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        cur = 0
        if len(nums) == 1:
            return nums[0]
        for c,v in enumerate(nums):
            if v != 0:
                if cur != c:
                    nums[cur], nums[c] = nums[c], 0
                cur +=1 
                    
# Someone else's solution

class Solution:
    def moveZeroes(self, nums: list) -> None:
        slow = 0
        for fast in range(len(nums)):
            if nums[fast] != 0 and nums[slow] == 0:
                nums[slow], nums[fast] = nums[fast], nums[slow]

            # wait while we find a non-zero element to
            # swap with you
            if nums[slow] != 0:
                slow += 1

"""
First Unique Character in a String

Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.
"""

# My solution

class Solution:
    def firstUniqChar(self, s: str) -> int:
        hashdict = {}
        for i in s:
            if i in hashdict:
                hashdict[i] +=1
            else:
                hashdict[i] = 1
        val_list = list(hashdict.values())
        if 1 in val_list:
            position = val_list.index(1)
            key_list = list(hashdict.keys())
            return s.index(key_list[position])
        else:
            return -1

# Editorial solution

class Solution:
    def firstUniqChar(self, s: str) -> int:
        """
        :type s: str
        :rtype: int
        """
        # build hash map : character and how often it appears
        count = collections.Counter(s)
        
        # find the index
        for idx, ch in enumerate(s):
            if count[ch] == 1:
                return idx     
        return -1

"""
Notes:
For my solution, I was able to not have to loop twice as I entered values in the dictionary through a for loop rather than using 
the collections Counter container. Therefore, the order of my Python dictionary will match that of the order of the string, and the 
first occurence will be synonymous with the first occurence in a string.

(In Python 3 onwards, Python dictionaries remember order in which values were added)

However, this isnt the same for the Collections counter container so you have to loop twice.
"""

"""
Robot Return to Origin

There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up 
at (0, 0) after it completes its moves.

You are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' 
(right), 'L' (left), 'U' (up), and 'D' (down).

Return true if the robot returns to the origin after it finishes all of its moves, or false otherwise.

Note: The way that the robot is "facing" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it 
move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.
"""

# I wrote 3 solutions

# Solution 1 

class Solution:
    def judgeCircle(self, moves: str) -> bool:
        up_down = 0
        right_left = 0
        for i in moves:
            if i == 'U':
                up_down +=1
            if i == 'D':
                up_down -= 1
            if i == 'R':
                right_left +=1
            if i == 'L':
                right_left -=1
        if up_down == 0 and right_left == 0:
            return True
        else:
            return False

# Solution 2 - I used a new method I learnt from the collections module

class Solution:
    def judgeCircle(self, moves: str) -> bool:
        # remember to put the iterable in the parentheses i.e. s -> string thus collections.Counter(s)
        count = collections.Counter(moves)
        if count['U'] == count['D'] and count['L'] == count['R']:
            return True
        else:
            return False
            
# Solution 3

        
class Solution:
    def judgeCircle(self, moves: str) -> bool:
        hashdict = {}
        hashdict['U'] = hashdict['D'] = hashdict['L'] = hashdict['R'] =  0
        for i in moves:
            hashdict[i] += 1
        if hashdict['U'] == hashdict['D'] and hashdict['L'] == hashdict['R']:
            return True
        else:
            return False

# Editorial solution

class Solution(object):
    def judgeCircle(self, moves):
        x = y = 0
        for move in moves:
            if move == 'U': y -= 1
            elif move == 'D': y += 1
            elif move == 'L': x -= 1
            elif move == 'R': x += 1

        return x == y == 0

"""
Find Pivot Index

Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers 
strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to 
the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.
"""

# My solution

class Solution:
    def pivotIndex(self, nums: List[int]) -> int:
        length = len(nums)
        if length == 1:
            return 0
        sum_left = sum_right = 0
        for c,v in enumerate(nums):
            if c == 0:
                sum_right = sum(nums[1:])
                if sum_right == sum_left:
                    return c
                sum_left += v 
            elif c > 0:
                sum_right -= v
                if sum_left == sum_right:
                    return c
                sum_left += v
        return -1

# Editorial solution

class Solution(object):
    def pivotIndex(self, nums):
        S = sum(nums)
        leftsum = 0
        for i, x in enumerate(nums):
            if leftsum == (S - leftsum - x):
                return i
            leftsum += x
        return -1
        
"""
Notes from Leetcode on solution:

Approach #1: Prefix Sum [Accepted]
Intuition and Algorithm

We need to quickly compute the sum of values to the left and the right of every index.

Let's say we knew S as the sum of the numbers, and we are at index i. If we knew the sum of numbers leftsum that are to the left of 
index i, then the other sum to the right of the index would just be S - nums[i] - leftsum.

As such, we only need to know about leftsum to check whether an index is a pivot index in constant time. Let's do that: as we iterate
through candidate indexes i, we will maintain the correct value of leftsum.
"""

"""
Pascal's Triangle

Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
""

# My solution

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        arr= []
        for i in range(numRows):
            if i == 0:
                arr.append([1])
            elif i == 1:
                arr.append([1,1])
            else:
                sub_arr = [None]*(i+1)
                for j in range(i+1):
                    if j == 0 or j == i:
                        sub_arr[j] = 1
                    if j == 1 or j == (i-1):
                        sub_arr[j] = i
                    if j != 0 and j!= i and j!= 1 and j!=(i-1):
                        sub_arr[j] = arr[i-1][j-1] + arr[i-1][j]
                arr.append(sub_arr)
        return arr 
            
# Editorial solution

class Solution:
    def generate(self, num_rows: int) -> List[List[int]]:
        triangle = []

        for row_num in range(num_rows):
            # The first and last row elements are always 1.
            row = [None for _ in range(row_num + 1)]
            row[0], row[-1] = 1, 1

            # Each triangle element is equal to the sum of the elements
            # above-and-to-the-left and above-and-to-the-right.
            for j in range(1, len(row) - 1):
                row[j] = triangle[row_num - 1][j - 1] + triangle[row_num - 1][j]

            triangle.append(row)

        return triangle
            
"""
Notes from Leetcode editorial solution

Approach 1: Dynamic Programming
Intuition

If we have the a row of Pascal's triangle, we can easily compute the next row by each pair of adjacent values.

Algorithm

Although the algorithm is very simple, the iterative approach to constructing Pascal's triangle can be classified as dynamic programming 
because we construct each row based on the previous row.

First, we generate the overall triangle list, which will store each row as a sublist. Then, we check for the special case of 00, as we 
would otherwise return [1][1]. Since numRowsnumRows is always greater than 00, we can initialize triangle with [1][1] as its first row, 
and proceed to fill the rows as follows::

"""

"""
Pascal's Triangle II

Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Input: rowIndex = 3
Output: [1,3,3,1]
"""

# My solution

class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        if rowIndex == 0:
            return [1]
        if rowIndex ==1:
            return [1,1]
        prev_row = self.getRow(rowIndex-1)
        arr = [1 for _ in range(rowIndex+1)]
        for i in range(1,rowIndex):
            arr[i] = prev_row[i-1]+prev_row[i]
        return arr

"""
High Five

Given a list of the scores of different students, items, where items[i] = [IDi, scorei] represents one score from a student with IDi, 
calculate each student's top five average.

Return the answer as an array of pairs result, where result[j] = [IDj, topFiveAveragej] represents the student with IDj and their top 
five average. Sort result by IDj in increasing order.

A student's top five average is calculated by taking the sum of their top five scores and dividing it by 5 using integer division.
"""

# My solution

class Solution:
    def highFive(self, items: List[List[int]]) -> List[List[int]]:
        items = sorted(items)
        grades_dict = {}
        arr = []
        for c,v in enumerate(items):
            if v[0] in grades_dict:
                min_grades = min(grades_dict[v[0]])
                if v[1] > min_grades: 
                    grades_dict[v[0]].remove(min_grades)
                    grades_dict[v[0]].append(v[1])
            else:
                grades_dict[v[0]] = [v[1]] + [0]*4 
        for k,v in grades_dict.items():
            arr.append([k, sum(v)//5])
        return arr

"""
DI String Match

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

s[i] == 'I' if perm[i] < perm[i + 1], and
s[i] == 'D' if perm[i] > perm[i + 1].
Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.

Example 1:

Input: s = "IDID"
Output: [0,4,1,3,2]
"""

# My solution

class Solution:
    def diStringMatch(self, s: str) -> List[int]:
        length = len(s)
        arr = [None]*(length+1)
        id_I = 0
        id_D = length
        for i in range(length):  
            if s[i] == 'I':
                arr[i] = id_I
                id_I +=1
            if s[i] == 'D':
                arr[i] = id_D
                id_D -= 1
        # had this outside the for loop as you don't need to run this every time
        if s[length-1] == 'D':
            arr[length] = id_D
        else:
            arr[length] = id_I   
        return arr

"""
524. Longest Word in Dictionary through Deleting

Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the 
given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If 
there is no possible result, return the empty string.

 

Example 1:

Input: s = "abpcplea", dictionary = ["ale","apple","monkey","plea"]
Output: "apple"
"""

https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/

# My solution (based off a video I watched about this problem)

class Solution:
    def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        def helper(sub,whole):
            N,M = len(word), len(whole)
            i,j = 0,0
            while i<N and j<M:
                if sub[i] == whole[j]:
                    i+=1
                j+=1
            return i==N
        long_word=""
        long_length = 0
        for word in dictionary:
            if helper(word, s) == True:
                if len(word) > long_length:
                    long_word = word
                    long_length = len(word)
                if len(word) == long_length:
                    long_word = min(word, long_word)
        return long_word

# Solution from watching a video about the optimal algorithm 

class Solution:
    def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        def helper(sub,whole):
            result = 0
            for i in sub:
                try:
                    result = whole.index(i, result)
                    # VERY IMPORTANT - remember to increment by 1 so the start is after the index just found
                    result+=1
                except:
                    return False
            return True 
        long_word=""
        long_length = 0
        for word in dictionary:
            if helper(word, s):
                if len(word) > long_length:
                    long_word = word
                    long_length = len(word)
                if len(word) == long_length:
                    long_word = min(word, long_word)
        return long_word

"""
Longest Word in Dictionary

Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.

If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.

 

Example 1:

Input: words = ["w","wo","wor","worl","world"]
Output: "world"
Explanation: The word "world" can be built one character at a time by "w", "wo", "wor", and "worl".
"""

# My solution - 53 / 59 test cases passed.(Couldn't do better)

class Solution:
    def longestWord(self, words: List[str]) -> str:
        words = sorted(words)
        i = 0
        long_word = ""
        while i < len(words):
            initial = words[i][:1]
            length_initial = len(words[i])
            if length_initial!=1:
                while i<len(words) and words[i][:1] == initial:
                    i+=1
                if i<len(words):   
                    initial = words[i][:1]
                    length_initial = len(words[i])
            if length_initial==1:
                prev_word = words[i]
                i+=1
                if len(long_word)<1:
                    long_word = prev_word
            while 0<i<len(words) and words[i][:1] == initial and length_initial==1:
                cur_word = words[i]
                if prev_word == cur_word[:-1]:
                    if len(cur_word) > len(long_word):
                        long_word = cur_word
                    if len(cur_word) == len(long_word):
                        long_word = min(long_word, cur_word)
                if (len(cur_word))-(len(prev_word))==1:
                    prev_word = cur_word
                i+=1 
        return long_word

# Editorial solution

class Solution(object):
    def longestWord(self, words):
        ans = ""
        # set() method is used to convert any of the iterable to sequence of iterable elements with distinct elements, commonly called Set. 
        wordset = set(words)
        for word in words:
            if len(word) > len(ans) or len(word) == len(ans) and word < ans:
                # The all() function is an inbuilt function in Python which returns true if all the elements of a given iterable( List, Dictionary, Tuple, set, etc) are True else it returns False. It also returns True if the iterable object is empty.
                if all(word[:k] in wordset for k in range(1, len(word))):
                    ans = word

        return ans
  
 # Editorial solution 2 - sorts the list beforehand
 
 class Solution(object):
    def longestWord(self, words):
        wordset = set(words)
        words.sort(key = lambda c: (-len(c), c))
        for word in words:
            if all(word[:k] in wordset for k in xrange(1, len(word))):
                return word

        return ""

# My spin on the editorial solution

class Solution:
    def longestWord(self, words: List[str]) -> str:
        i = 0
        words = sorted(words)
        long_word = ""
        while i < len(words):
            init = words[i][:1]
            length_check = len(words[i])
            words_lst = []
            if length_check!=1:
                while i<len(words) and words[i][:1] == init:
                    i+=1
            while i<len(words) and words[i][:1] == init:
                if length_check==1:
                    words_lst.append(words[i])
                    if all(words[i][:j] in words_lst for j in range(1,len(words[i]))):
                        if len(words[i]) > len(long_word):
                            long_word = words[i]
                        if len(words[i]) == len(long_word):
                            long_word = min(long_word, words[i])
                    i+=1
        return long_word

# The above solution but without my extra spin (this is my own solution)

class Solution:
    def longestWord(self, words: List[str]) -> str:
        i = 0
        words = sorted(words)
        long_word = ""
        while i < len(words):
            init = words[i][:1]
            length_check = len(words[i])
            if length_check!=1:
                while i<len(words) and words[i][:1] == init:
                    i+=1
            while i<len(words) and words[i][:1] == init:
                if length_check==1:
                    if all(words[i][:j] in words for j in range(1,len(words[i]))):
                        if len(words[i]) > len(long_word):
                            long_word = words[i]
                        if len(words[i]) == len(long_word):
                            long_word = min(long_word, words[i])
                    i+=1
        return long_word

"""
Notes from editorial solution:

Approach #1: Brute Force [Accepted]
Intuition

For each word, check if all prefixes word[:k] are present. We can use a Set structure to check this quickly.

Algorithm

Whenever our found word would be superior, we check if all it's prefixes are present, then replace our answer.

Alternatively, we could have sorted the words beforehand, so that we know the word we are considering would be the answer if all it's 
prefixes are present.
"""


https://leetcode.com/problems/longest-substring-without-repeating-characters/solution/
"""
Longest Substring Without Repeating Characters

Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
"""

# My solution - IT FULLY WORKS!!!!

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        longest_string = 0
        long_list =[]
        for c,v in enumerate(s):
            if c == 0:
                long_list.append(v)
                longest_string = len(v)
            if c>0:
                # ORDER MATTERS! it's important the second if statement is before the first as it will append the element thus which will automatically make it satisfy (if v in long_list) which will then propogate errors
                if v in long_list:
                    # VERY IMPORTANT to remember to add the "+1" to the "long_list.index(v))" otherwise you will be at the wrong start point and propogating errors
                    long_list=long_list[(long_list.index(v))+1:]
                if v not in long_list:
                    long_list.append(v)
                longest_string = max(longest_string, len(long_list))
        return longest_string

# My take on solution seen in https://www.youtube.com/watch?v=RHM5G8HGf6M . Sliding window solution.

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        hash_dict = {}
        i = res = 0
        for c,v in enumerate(s):
            if v in hash_dict:
                i = max(i, hash_dict[v]+1)
                hash_dict[v] = c
            if v not in hash_dict:
                hash_dict[v] = c
            res = max(res, c-i+1)
        return res
        
# Editorial solution 

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        chars = [0] * 128

        left = right = 0

        res = 0
        while right < len(s):
            r = s[right]
            chars[ord(r)] += 1

            while chars[ord(r)] > 1:
                l = s[left]
                chars[ord(l)] -= 1
                left += 1

            res = max(res, right - left + 1)

            right += 1
        return res

# Another editorial solution

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n = len(s)
        ans = 0
        # mp stores the current index of a character
        mp = {}

        i = 0
        # try to extend the range [i, j]
        for j in range(n):
            if s[j] in mp:
                i = max(mp[s[j]], i)

            ans = max(ans, j - i + 1)
            mp[s[j]] = j + 1

        return ans

https://leetcode.com/problems/3sum-smaller/
"""
259. 3Sum Smaller

Given an array of n integers nums and an integer target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

 

Example 1:

Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
[-2,0,1]
[-2,0,3]
"""

# My solution - iterative solution with a bad time complexity. Could definitely be more optimized!

class Solution:
    def threeSumSmaller(self, nums: List[int], target: int) -> int:
        if len(nums)<3:
            return 0
        count=0
        nums = sorted(nums)
        for c,v in enumerate(nums):
            i = c+1
            while i<len(nums):
                tot=v+nums[i]
                j = i+1 
                # important to have the following 2 if statements as two seperate if statements alone
                # if you combine these two if statements with and "and", it breaks
                if j>=len(nums):
                    break
                if tot+nums[j]>=target:
                    break
                while j<len(nums) and tot+nums[j]<=target:
                    if tot+nums[j]<target:
                        count+=1
                    j+=1
                i+=1                    
        return count

# Editorial solution written by me. Not optimized so passed all tests but 1 as it takes too long. Makes use of 2 for loops.

class Solution:
    def threeSumSmaller(self, nums: List[int], target: int) -> int:
        if len(nums)<3:
            return 0
        nums.sort()
        count = 0
        for j in range(len(nums)-2):
            i = j+1
            start = nums[j]
            while i<len(nums)-1:
                end = len(nums)-1
                while i<end and start+nums[i]+nums[end]>=target:
                    end-=1
                count+=(end-i)
                i+=1
        return count

# Optimized ideal solution written by me
class Solution:
    def threeSumSmaller(self, nums: List[int], target: int) -> int:
        if len(nums)<3:
            return 0
        nums.sort()
        count = 0
        for i in range(len(nums)-2):
            left = i+1
            right = len(nums)-1
            start=nums[i]
            while left<right:
                if start+nums[left]+nums[right]>=target:
                    while right>left and start+nums[left]+nums[right]>=target:
                        right-=1
                while left<right and start+nums[left]+nums[right]<target:
                    count+=(right-left)
                    left+=1
        # remember to have the return statement outside of the while loops!
        return count 

https://leetcode.com/problems/monotonic-array/
"""
Monotonic Array

An array is monotonic if it is either monotone increasing or monotone decreasing.

An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].

Given an integer array nums, return true if the given array is monotonic, or false otherwise.

 

Example 1:

Input: nums = [1,2,2,3]
Output: true
"""

# My solution

class Solution:
    def isMonotonic(self, nums: List[int]) -> bool:
        # make sure to add the following condition or it breaks the code and wont be able to run with my functions as they have been coded
        if len(nums)<=2:
            return True
        def mono_inc(arr, start):
            # increasing monotonic array so arr[i]<arr[i+1]
            for i in range(start, len(arr)-1):
                if arr[i+1]<arr[i]:
                    return False
            return True
        def mono_dec(arr, start):
            # decreasing monotonic array so arr[i+1]<arr[i]
            for i in range(start, len(arr)-1):
                if arr[i]<arr[i+1]:
                    return False
            return True
        if nums[0]<nums[1]:
            # make sure to add return statement otherwise it doesn't work
            return mono_inc(nums,1)
        if nums[0]>nums[1]:
            return mono_dec(nums,1)
        if nums[0]==nums[1]:
            j=1
            while nums[j]==nums[j+1]:
                j+=1
                if j == len(nums)-1:
                    return True
            if nums[j]<nums[j+1]:
                return mono_inc(nums, j+1)
            if nums[j]>nums[j+1]:
                return mono_dec(nums,j+1)

https://leetcode.com/problems/is-subsequence/
"""
Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
"""

# My solution after looking at the solution

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        for i in s:
            # The index() method returns the index of a substring inside the string (if found). If the substring is not found, it raises an exception.
            try:
                index = t.index(i)
                t = t[index+1:]
            except:
                return False
        return True

# My take on Editorial Solution: Approach 2: Two-Pointers

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        right = 0
        for c,v in enumerate(s):
            if right>=len(t):
                return False
            while right<len(t) and v!=t[right]:
                right+=1
                if right>=len(t):
                    return False
            if right<len(t) and v==t[right]:
                right+=1
        return True 
        
# Editorial Solution: Approach 2: Two-Pointers

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        LEFT_BOUND, RIGHT_BOUND = len(s), len(t)

        p_left = p_right = 0
        while p_left < LEFT_BOUND and p_right < RIGHT_BOUND:
            # move both pointers or just the right pointer
            if s[p_left] == t[p_right]:
                p_left += 1
            p_right += 1

        return p_left == LEFT_BOUND

# My take on another editorial solution which doesn't fully pass all the test cases

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        t_dict = {}
        for c,v in enumerate(t):
            if v in t_dict:
                t_dict[v].append(c)
            if v not in t_dict:
                t_dict[v] = [c]
        t_point = 0   
        for c,v in enumerate(s):
            if v not in t_dict:
                return False
            if v in t_dict:
                pointer = 0
                while True:
                    if pointer>=len(t_dict[v]):
                        return False
                    if c>=t_dict[v][pointer] and t_point>=t_dict[v][pointer]:
                        t_point = t_dict[v][pointer]
                        break
                    pointer+=1
        return True
