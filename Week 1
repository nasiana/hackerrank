"""
Sparse Arrays:
There is a collection of input strings and a collection of query strings. For each query string, determine how many times it occurs in the list of input strings. 
Return an array of the results.
"""

# My solution
def matchingStrings(strings, queries):
    n = len(strings)
    1 <= n <= 1000
    q = len(queries)
    1 <= q <= 1000
    results = []
    for i in queries:
        if type(i) == int or type(i) == float:
            abs(i) <= 20
        count = 0
        for j in strings:
            if type(j) == int or type(j) == float:
                1 <= abs(j)
            if i == j:
                count += 1
        results.append(count)
    return results 
    
 # Editorial solution
 
 """
 For this solution: as the strings come in, create a hash map to accumulate the number of occurrences of each string. A lookup is all that is needed to retrieve 
 your answers.
 """
 
 def matchingStrings(strings, queries):
    words = dict()
    ans = []
    for w in strings:
        if w in words:
            words[w] += 1
        else:
            words[w] = 1
    for q in queries:
        if q in words:
            ans.append(words[q])
        else:
            ans.append(0)
    return ans
    
 """
 Notes on the editorial solution:
 https://towardsdatascience.com/faster-lookups-in-python-1d7503e9cd38:
 You have to go through the entire list to get what you want. However, a dictionary will return the value you ask for without going through all keys.
 
 Lookups are faster in dictionaries because Python implements them using hash tables.
 
 If we explain the difference by Big O concepts, dictionaries have constant time complexity, O(1) while lists have linear time complexity, O(n)
 
 However, we have a typical space-time tradeoff in dictionaries and lists. It means we can decrease the time necessary for our algorithm but we need to use more 
 space in memory.
 
 Although dictionaries are optimized a lot more in Python 3.6, they still use more memory than lists, since you need to use space for the keys and the lookup as 
 well, while lists use space only for the values.
 
 Why is looking up entries in a dictionary so much faster? It’s because of the way Python implements dictionaries using hash tables. Dictionaries are Python’s built-in mapping type and so have also been highly optimised. Sets are implemented 
 in a similar way.
 """
 
 """
 Lonely Integer:
 Given an array of integers, where all elements but one occur twice, find the unique element.
 """

# My solution - hehe I used code that I learnt in the previous example

def lonelyinteger(a):
    n = len(a)
    hash_dict = dict()
    for i in a:
        if i in hash_dict:
            hash_dict[i] += 1
        else:
            hash_dict[i] = 1
    # the following line will find the key corresponding to value 1
    return list(hash_dict.keys())[list(hash_dict.values()).index(1)]
    
    """
    Notes: 
    The index() method returns index of corresponding value in a list.
    
    The approach used here is to find two separate lists of keys and values.
    
    Then fetch the key using the position of the value in the val_list.
    
    As key at any position N in key_list will have corresponding value at position N in val_list. 
    
    I was inspired by this code from https://www.geeksforgeeks.org/python-get-key-from-value-in-dictionary/:
# creating a new dictionary
my_dict ={"java":100, "python":112, "c":11}
 
# list out keys and values separately
key_list = list(my_dict.keys())
val_list = list(my_dict.values())
 
# print key with val 100
position = val_list.index(100)
print(key_list[position])
 
# print key with val 112
position = val_list.index(112)
print(key_list[position])
 
# one-liner
print(list(my_dict.keys())[list(my_dict.values()).index(112)])
"""

"""
Diagonal Difference:
Given a square matrix, calculate the absolute difference between the sums of its diagonals.
"""

# My solution 

def diagonalDifference(arr):
    n = len(arr)
    D2_idx = n - 1
    D1 = 0
    D2 = 0
    for i in range(0, n):
    # accessing elements by index in a list has a constant time complexity, it's quick and efficient
        D1 += arr[i][i]
        D2 += arr[i][D2_idx]
        D2_idx -= 1
    return abs(D1-D2)
    
 """
 Notes:
 Python doesn't have a built-in type for matrices. However, we can treat a list of a list as a matrix, therefore we code matrixes in Python as nested lists.
 """

# Editorial solution

def diagonalDifference(arr):
    # Write your code here, O(n)
    #l, r = left sum, right sum
    l, r = 0, 0
    # single pass, grab both values
    for i in range(len(arr)):
        l += arr[i][i]
        r += arr[i][-i-1]
    return abs(l-r)
    
  """
  Notes:
  Negative Indexing:
  The index value of -1 gives the last element, and -2 gives the second last element of an array. The negative indexing starts from where the array ends. This means 
  that the last element of the array is the first element in the negative indexing which is -1.
  """

# Another solution I liked

def diagonalDifference(arr):
    num = len(arr)
    first = 0
    second = 0
    for i in range(0, num):
        first += arr[i][i]
        # (num - 1) represents the length of the array and is equal to both length of rows and columns in a square matrix
        second += arr[i][num - 1 - i]
        
    return abs(first - second)
    
  """
  Counting Sort 1
  """
  
  # initial solution - this was computally expensive as it used a nested for loop (I THINK it has time complexity n^2)
  
  def countingSort(arr):
    length = len(arr)
    result = [0] * 100
    for i in range(100):
        for j in arr:
            if i == j:
                result[i] += 1 
    return result  

# my better second solution which only used 1 for loop and has much better time complexity - I THINK it has time complexity n

def countingSort(arr):
    length = len(arr)
    result = [0] * 100
    for i in arr:
    # I didn't actually have to have to seperate if conditions as the numbers had already been initialized
        if result[i] == 0:
            result[i] += 1
        else:
            result[i] += 1
    return result  

# Editorial solution

def countingSort(arr):
    result = [0]*100
    for i in arr:
        result[i] += 1
    return(result)

"""
Pangrams:
A pangram is a string that contains every letter of the alphabet. Given a sentence determine whether it is a pangram in the English alphabet. Ignore case. Return 
either pangram or not pangram as appropriate.
"""

# My solution 

def pangrams(s):
    alphabet = list(map(chr, range(97, 123)))
    alphabet_length = len(alphabet)
    count = 0
    for i in alphabet:
        if i in s.lower():
            count += 1
    return "pangram" if count == alphabet_length else "not pangram"
    
# solution taken from discussion board on hackerrank

def pangrams(s):
    return 'pangram' if len(set(s.replace(' ','').lower()))==26 else 'not pangram'
   
"""
Permuting Two Arrays
"""

# My solution

def twoArrays(k, A, B):
    if A != sorted(A):
        A = sorted(A)
    B = sorted(B, reverse = True)
    C = list(zip(A, B))
    for c,v in enumerate(C):
        if sum(v) >= k:
            if c == (len(C) - 1):
                return "YES"
        else:
            return "NO"
 
 # discussion solution
 def twoArrays(k, A, B):
    # Write your code here
    # Create two arrays (one sorted ascending, one sorted descending):
    A.sort()
    B.sort(reverse=True)
    for i in range(len(A)):
        if(A[i] + B[i] < k):
            return "NO"
    return "YES"
    
  """
  Comment from another user:
  I had a very similar solution but I found that using B.sort(reverse=True) made it run much slower than defining a variable j within the loop where 
  j = len(A) - i - 1 and using that to index array B instead
  """

"""
Sales by Match
"""

def sockMerchant(n, ar):
    ar = sorted(ar)
    count = 0
    j = 0
    while j < len(ar) - 1:
        if ar[j] == ar[j+1]:
            count += 1
            j += 2
        else:
            j += 1
    return count 
    
   """
   Zig Zag Sequence
   """
   
   def findZigZagSequence(a, n):
    a.sort()
    mid = int((n + 1)/2)-1
    a[mid], a[n-1] = a[n-1], a[mid]

    st = mid + 1
    ed = n - 2
    while(st <= ed):
        a[st], a[ed] = a[ed], a[st]
        st = st + 1
        ed = ed - 1

    for i in range (n):
        if i == n-1:
            print(a[i])
        else:
            print(a[i], end = ' ')
    return

"""
Drawing Book
"""

#my solution

def pageCount(n, p):
    if n == p:
        return 0
    elif (n-p) < p:
        if (n-p) == 1 and n%2 != 0:
            return 0
        elif (n-p) == 1 and n%2 == 0:
            return 1
        else:
            ans = (n-p)/2 
            return int(ans)
    else:
        if p == 1:
            return 0
        else:
            ans = p/2
            return int(ans)

# Editorial

def pageCount(n, p):
    if not n%2:
        n += 1
    return min(p//2, (n-p)//2)

"""
Caesar Cipher
"""

# My solution

def caesarCipher(s, k):
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    alphabet_new = alphabet[k:] + alphabet[0:k]
    s_2 = ""
    for i in s:
        if i.isalpha():
            rep = alphabet.find(i.lower())
            if i.isupper():
                s_2 += alphabet_new[rep].upper()
            else:
                s_2 += alphabet_new[rep]
        else:
            s_2 += str(i)   
    return s_2
  
 """
 Max Min
 """
 
 # My solution 
 
 def maxMin(k, arr):
    arr=sorted(arr)
    lst = []
    k-=1
    for i in range(len(arr)-k):
        lst.append(arr[i+k]-arr[i])
        print(i)
    return min(lst)

 
